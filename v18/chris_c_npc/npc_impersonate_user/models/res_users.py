import logging

from odoo import fields, models, api

from odoo.addons.base.models.ir_model import MODULE_UNINSTALL_FLAG
from odoo.addons.base.models.res_users import name_selection_groups, name_boolean_group

from lxml import etree
from lxml.builder import E

_logger = logging.getLogger(__name__)


class ResUsers(models.Model):
    _inherit = "res.users"
    
    @api.model_create_multi
    def create(self, vals_list):
        impersonated_group = self.env.ref("auth_impersonate_user.impersonate_user_group")
        field_name = name_boolean_group(impersonated_group.id)
        users = super().create(vals_list)
        # If impersonate_user_group is not set on the new portal users
        if any((field_name not in val) for val in vals_list):
            for user in users:
                if user.has_group('base.group_portal'):
                    user.write({'groups_id': [(4, impersonated_group.id)]})
        return users
    
    def onchange(self, values, field_names, fields_spec):
        result = super().onchange(values, field_names, fields_spec)
        
        impersonated_group = self.env.ref("auth_impersonate_user.impersonate_user_group", raise_if_not_found=False)
        user_type_field_name = self.env['res.groups']._get_user_type_fieldname()
        if impersonated_group and user_type_field_name in field_names:
            field_name = name_boolean_group(impersonated_group.id)
            if values.get(user_type_field_name) == self.env.ref('base.group_portal').id:
                result['value'][field_name] = True
            else:
                result['value'][field_name] = False
        
        return result
    
    def _setup_portal_user_impersonation(self):
        impersonate_group = self.env.ref("auth_impersonate_user.impersonate_user_group", raise_if_not_found=False)
        if impersonate_group:
            for user in self:
                if user.has_group('base.group_portal'):
                    user.write({'groups_id': [(4, impersonate_group.id)]})
    
    def _compute_can_be_impersonated(self):
        for user in self:
            user.can_be_impersonated = (
                user.has_group("auth_impersonate_user.impersonate_user_group")
                if self.env.user != user
                else False
            )


class GroupsView(models.Model):
    _inherit = 'res.groups'
    
    @api.model
    def _update_user_groups_view(self):
        super(GroupsView, self)._update_user_groups_view()
        self._update_can_be_impersonated_group_view()
    
    def _get_user_type_fieldname(self):
        group_portal = self.env.ref('base.group_portal')
        user_type_categ = group_portal.category_id
        user_type_groups = self.search([('category_id', '=', user_type_categ.id)])
        return name_selection_groups(user_type_groups.ids)
    
    @api.model
    def _update_can_be_impersonated_group_view(self):
        view = self.env.ref('npc_impersonate_user.user_groups_view', raise_if_not_found=False)
        impersonated_group = self.env.ref("auth_impersonate_user.impersonate_user_group", raise_if_not_found=False)
        
        if not impersonated_group or not view:
            return
        
        field_name = name_boolean_group(impersonated_group.id)
        category = impersonated_group.category_id
        
        group_portal = self.env.ref('base.group_portal')
        user_type_categ = group_portal.category_id
        user_type_groups = self.search([('category_id', '=', user_type_categ.id)])
        user_type_field_name = name_selection_groups(user_type_groups.ids)
        
        invisible_attrs = f'{user_type_field_name} != {group_portal.id}'
        attrs = {'invisible': invisible_attrs, 'groups': 'base.group_no_one'}
        xml0 = []
        
        # Add user_type_field since we are using it on the attributes
        xml0.append(E.field(name=user_type_field_name, **dict(attrs, invisible="True")))
        xml0.append(E.field(name=field_name, **dict(attrs, invisible="True", groups='!base.group_no_one')))
        xml0.append(E.separator(string=category.name, **attrs))
        xml0.append(E.group(*[E.field(name=field_name, **attrs)]))
        
        xml = E.xpath(*(xml0), expr="//page[@name='access_rights']/group[last()]", position="after")
        xml.addprevious(etree.Comment("GENERATED by: auth_impersonate_user"))
        
        xml_content = etree.tostring(xml, pretty_print=True, encoding="unicode")
        if xml_content != view.arch:  # avoid useless xml validation if no change
            new_context = dict(view._context)
            new_context.pop('install_filename', None)  # don't set arch_fs for this computed view
            new_context['lang'] = None
            view.with_context(new_context).write({'arch': xml_content})



    

    
    
    
            
    
            
    
            
    
        
        
    



